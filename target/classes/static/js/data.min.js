/*!
 * Start Bootstrap - ML CO2 Impact v5.0.8 ()
 * Copyright 2013-2023 
 * Licensed under MIT (https://github.com/BlackrockDigital/ml-co2-impact/blob/master/LICENSE)
 */

"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var dev_base_data_url = 'https://raw.githubusercontent.com/mlco2/impact/master/data/';
var prod_base_data_url = 'https://raw.githubusercontent.com/mlco2/impact/master/data/';
var serveFrom = "dev";

var parseProvidersData = function parseProvidersData(data) {
  var providers = {};
  var prov;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var d = _step.value;
      var provider = d.provider,
          region = d.region,
          country = d.country,
          state = d.state,
          city = d.city,
          source = d.source,
          comment = d.comment,
          providerName = d.providerName,
          offsetRatio = d.offsetRatio;
      var impact = parseInt(d.impact, 10);
      var regionName = d.regionName;

      if (!regionName) {
        regionName = region;
      }

      if (!(provider in providers)) {
        providers[provider] = {
          __min: {
            impact: 10000,
            region: ""
          }
        };
      }

      if (impact < providers[provider].__min.impact) {
        providers[provider].__min = {
          region: region,
          impact: impact
        };
      }

      providers[provider][region] = {
        regionName: regionName,
        country: country,
        state: state,
        city: city,
        source: source,
        comment: comment,
        providerName: providerName,
        offsetRatio: offsetRatio,
        impact: parseFloat(impact)
      };
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return providers;
};

var parseGPUData = function parseGPUData(data) {
  var gpus = {};
  var min = 1000000;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var d = _step2.value;
      var name = d.name;
      var watt = d.tdp_watts;
      gpus[name] = {
        watt: parseFloat(watt)
      };
      if (parseFloat(watt) < min) min = parseFloat(watt);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return gpus;
};

function getProvidersData() {
  return _getProvidersData.apply(this, arguments);
}

function _getProvidersData() {
  _getProvidersData = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return $.ajax({
              type: "GET",
              url: prod_base_data_url + "impact.csv",
              dataType: "text"
            });

          case 3:
            result = _context.sent;
            serveFrom = "prod";
            return _context.abrupt("return", result);

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            _context.prev = 10;
            _context.next = 13;
            return $.ajax({
              type: "GET",
              url: dev_base_data_url + "impact.csv",
              dataType: "text"
            });

          case 13:
            result = _context.sent;
            return _context.abrupt("return", result);

          case 17:
            _context.prev = 17;
            _context.t1 = _context["catch"](10);
            console.log("Error getting providers:");
            console.error(_context.t1);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 8], [10, 17]]);
  }));
  return _getProvidersData.apply(this, arguments);
}

function getGPUData() {
  return _getGPUData.apply(this, arguments);
}

function _getGPUData() {
  _getGPUData = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var result;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return $.ajax({
              type: "GET",
              url: prod_base_data_url + "gpus.csv",
              dataType: "text"
            });

          case 3:
            result = _context2.sent;
            return _context2.abrupt("return", result);

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);
            _context2.prev = 9;
            _context2.next = 12;
            return $.ajax({
              type: "GET",
              url: dev_base_data_url + "gpus.csv",
              dataType: "text"
            });

          case 12:
            result = _context2.sent;
            return _context2.abrupt("return", result);

          case 16:
            _context2.prev = 16;
            _context2.t1 = _context2["catch"](9);
            console.log("Error getting providers:");
            console.error(_context2.t1);

          case 20:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 7], [9, 16]]);
  }));
  return _getGPUData.apply(this, arguments);
}

function getData() {
  return _getData.apply(this, arguments);
}

function _getData() {
  _getData = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3() {
    var proResults, gpuResults;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return getProvidersData();

          case 2:
            proResults = _context3.sent;
            _context3.next = 5;
            return getGPUData();

          case 5:
            gpuResults = _context3.sent;
            return _context3.abrupt("return", {
              providers: parseProvidersData($.csv.toObjects(proResults)),
              gpus: parseGPUData($.csv.toObjects(gpuResults))
            });

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getData.apply(this, arguments);
}